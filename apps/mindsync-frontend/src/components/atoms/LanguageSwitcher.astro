---
import {LanguageSelector} from "astro-i18next/components";
import {localizePath} from "astro-i18next";
import i18next from "i18next";

interface LanguageMapping {
  [localeCode: string]: string;
}

export enum DisplayType  {
    FLAG = 'flag',
    TEXT = 'text',
    BOTH = 'both'
}

const flags = [
    {
        'code': 'en',
        'flag': 'ðŸ‡¬ðŸ‡§'
    },
    {
        'code': 'es',
        'flag': 'ðŸ‡ªðŸ‡¸'
    }
]

interface Props extends astroHTML.JSX.SelectHTMLAttributes {
    displayType?: DisplayType;
    languageMapping?: LanguageMapping;
}

const supportedLanguages = i18next.languages;
const currentLanguage = i18next.language;

const { pathname } = Astro.url;

const { displayType = DisplayType.FLAG, languageMapping, ...attributes } = Astro.props;
---
{
    displayType === DisplayType.TEXT || displayType === DisplayType.BOTH ? <LanguageSelector
        showFlag={displayType === DisplayType.BOTH}
        languageMapping={languageMapping}
        tabindex="0"
        {...attributes}
    /> :
    <select onchange="location = this.value;" {...attributes}>
        {
            supportedLanguages.map((supportedLanguage: string) => {
            const localeValue = localizePath(pathname, supportedLanguage);
            const flag = flags.find((f) => f.code === supportedLanguage)?.flag || supportedLanguage;

            return (
                <option value={localeValue} selected={supportedLanguage === currentLanguage}>
                {flag}
                </option>
            );
            })
        }
    </select>
}
